import telebot  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
from telebot import types  # —Å –ø–æ–º–æ—â—å—é —Ç–∏–ø–æ–≤ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import gspread
from openpyxl import load_workbook
from apscheduler.schedulers.background import BackgroundScheduler

from test_functions import buttons, poisk_tovar_in_base, rasylka_message, admin_id, tovar_in_basket, zayavka_done, \
    statistic
from passwords import *
article = None

token = code_mashine
# token = lemonade
# token = ccmclub
bot = telebot.TeleBot(token)

tovar_name = None
quantity = None
rassylka = None


@bot.message_handler(commands=['start'])    # –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(message):
    file_open = open("start_logo.png", 'rb')    # –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    bot.send_photo(message.chat.id, file_open, '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç CCM_Club.
–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ö–æ–∫–∫–µ–π–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –Ω–∞–ª–∏—á–∏—è –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º. üèÜüèíü•á

–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤.
¬´–û –Ω–∞—Å¬ª —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º –æ –Ω–∞—Å –∏ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º.
–ö–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ /help ‚Äì –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.
''')
    buttons(bot, message).menu_buttons()


@bot.message_handler(commands=['help'])
def help(message):
    kb1 = types.InlineKeyboardMarkup()
    with open('command_help.txt', 'r') as help_text:
        help_text1 = help_text.read()
    if message.chat.id == admin_id:      # —É—Å–ª–æ–≤–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        but1 = types.InlineKeyboardButton('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help', callback_data='rhelp')
        kb1.add(but1)
        bot.send_message(message.chat.id, help_text1,
                         reply_markup=kb1)
    else:
        bot.send_message(message.chat.id, help_text1)
        buttons(bot, message).menu_buttons()


@bot.message_handler(commands=['sent_message'])
def sent_message(message):
    if message.chat.id == admin_id:
        sent = bot.send_message(admin_id, '–í–≤–µ–¥–∏ id —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞')
        bot.register_next_step_handler(sent, sent_message_perehvat_1)   # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "sent" –∏
                                                              # –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é base_perehvat
    else:
        bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã')


@bot.message_handler(func=lambda m: m.text)  # –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def chek_message_category(m):
    list_one = []
    back_value = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
    wb = load_workbook('CCM.xlsx')
    ws = wb['–ú–õ –û—Å—Ç–∞—Ç–∫–∏ —à—Ç–∞–±']
    if m.text == '–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è':
        for row in ws.iter_rows(min_row=2, min_col=9, max_col=9, values_only=True):
            if row == (None,):
                break
            list_one.append(*row)
        list_one = sorted(list(set(list_one)))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, m, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()
        statistic().proverka(m)
    elif m.text == '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è üÜï':
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=15, values_only=True):
            if row[14] is not None:
                list_one.append(f'üÜï{row[8]}')
            elif row[8] == (None,):
                break
        list_one = sorted(list(set(list_one)))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, m, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()
        statistic().proverka(m)
    elif m.text == '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ üè∑Ô∏è':
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=15, values_only=True):
            if row[9] is not None:
                list_one.append(f'üè∑Ô∏è{row[8]}')
            elif row[8] == (None,):
                break
        list_one = sorted(list(set(list_one)))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, m, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()
        statistic().proverka(m)
    elif m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É":
        bot.send_message(m.chat.id, f'–ó–∞–≥—Ä—É–∂–∞–µ–º..')
        poisk_tovar_in_base(bot, m).basket_search()
        buttons(bot, m).menu_buttons()
    elif m.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã':
        bot.send_message(m.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º..')
        poisk_tovar_in_base(bot, m).zakazy_search()
    elif m.text == '–ö–æ—Ä–∑–∏–Ω–∞ üóëÔ∏è':
        bot.send_message(m.chat.id, f'–ó–∞–≥—Ä—É–∂–∞–µ–º..')
        poisk_tovar_in_base(bot, m).basket_search()
    elif m.text == '–û –Ω–∞—Å ‚ÅâÔ∏è':
        kb1 = types.InlineKeyboardMarkup()
        with open('about.txt', 'r') as help_text:
            help_text1 = help_text.read()
        if m.chat.id == admin_id:  # —É—Å–ª–æ–≤–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
            but1 = types.InlineKeyboardButton('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ "–û –Ω–∞—Å"', callback_data='rabout')
            kb1.add(but1)
            bot.send_message(m.chat.id, help_text1,
                             reply_markup=kb1)
        else:
            bot.send_message(m.chat.id, help_text1)
    elif len(list_one) == 0:
        list_two = []
        kategoriya = None
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=16, values_only=True):
            if row == (None,):
                break
            elif row[8] == m.text:     # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Ä–∞–≤–µ–Ω —Ä–∞–∑–¥–µ–ª—É
                list_one.append(row[1][0:30])
                list_one = sorted(list(set(list_one)))
                kategoriya = '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                back_value = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
            elif m.text in str(row[1]):
                if len(row[2]) <= 25:
                    list_two.append((str(row[2])+'-'+str(row[3]), row[0]))
                    back_value = row[8]
                    kategoriya = '—Ç–æ–≤–∞—Ä'
                else:
                    list_two.append((f'{row[2][:15]}...{str((row[2])+str(row[3]))[-12:]}', row[0]))
                    back_value = row[8]
                    kategoriya = '—Ç–æ–≤–∞—Ä'
            elif m.text in str(row[2]):
                tovar_name = row[2]
                article = row[0]
                image = row[10]
                size = row[3]
                price = row[4]
                vnalichii = row[7]
                tovar_type = row[15]
                your_price = row[5]
                dostavka = row[11]
                size_web = row[13]
                bot.send_message(m.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º..')
                poisk_tovar_in_base(bot, m, article, vnalichii=vnalichii, tovar_name=tovar_name,
                                    image=image, size=size, price=price,
                                    your_price=your_price, size_web=size_web, tovar_type=tovar_type,
                                    dostavka=dostavka).poisk_ostatok(back_value=row[1])
        if len(list_one) != 0:
            file_open = open("menu_logo.jpeg", 'rb')
            list_one.append(back_value)
            buttons(bot, m, kategoriya=kategoriya, list_one=list_one,
                    image=file_open).razdely_buttons()
        elif len(list_two) != 0:
            file_open = open("menu_logo.jpeg", 'rb')
            list_two.append(('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', back_value))
            buttons(bot, m, kategoriya=kategoriya, list_one=list_two,
                    image=file_open).marks_buttons()


@bot.callback_query_handler(func=lambda callback: callback.data)
def check_callback(callback):
    global tovar_name, quantity, article
    back_value = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
    wb = load_workbook('CCM.xlsx')
    ws = wb['–ú–õ –û—Å—Ç–∞—Ç–∫–∏ —à—Ç–∞–±']
    list_one = []
    if callback.data == '–î–∞, —Ö–æ—á—É!':
        val = bot.send_message(callback.message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ß–ò–°–õ–û–ú —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
        bot.register_next_step_handler(val, amount)
    elif callback.data == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        redact_basket(bot, callback.message).zapros_number()
    elif callback.data[:7] == 'red_row':
        val = bot.edit_message_text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ù–û–í–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ß–ò–°–õ–û–ú —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n'
                                    f'–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–ª—å (0).',
                                    callback.message.chat.id, callback.message.id)
        bot.register_next_step_handler(val, redact_basket(bot, callback, callback.data[7:]).redact_quintity)
    elif callback.data == 'delete_row':
        bot.send_message(callback.message.chat.id, f'–ü–æ–¥—á–∏—â–∞–µ–º –±–∞–∑—É..')
        poisk_tovar_in_base(bot, callback.message).basket_delete_all()
    elif callback.data == 'rhelp':
        kb7 = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        but1 = types.KeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è')
        kb7.add(but1)
        val = bot.send_message(callback.message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help', reply_markup=kb7)
        bot.register_next_step_handler(val, redact_basket(bot, callback.message, file='command_help.txt').redact_text)
    elif callback.data == 'rabout':
        kb7 = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        but1 = types.KeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è')
        kb7.add(but1)
        val = bot.send_message(callback.message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ "–û –Ω–∞—Å"', reply_markup=kb7)
        bot.register_next_step_handler(val, redact_basket(bot, callback.message, file='about.txt').redact_text)
    elif callback.data == '–ö–æ—Ä–∑–∏–Ω–∞':
        kb7 = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        but2 = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data="redact")
        but3 = types.InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='delete_row')
        kb7.add(but1, but2, but3)
        bot.edit_message_text(f'–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑/–∫—É–ø–∏—Ç—å –æ–Ω–ª–∞–π–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?\n '
                              f'/help - –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏', callback.message.chat.id,
                              callback.message.id)
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.id, reply_markup=kb7)
    elif callback.data == 'redact':
        buttons(bot, callback.message).basket_buttons_redact()
    elif callback.data == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":   # –∫–Ω–æ–ø–∫–∞ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ" –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        for row in ws.iter_rows(min_row=2, min_col=9,   max_col=9, values_only=True):
            if row == (None,):
                break
            list_one.append(*row)
        list_one = list(set(list_one))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, callback.message, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()
    elif callback.data == 'üÜï–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ':     # –∫–Ω–æ–ø–∫–∞ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ" –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=15, values_only=True):
            if row[14] is not None:
                list_one.append(f'üÜï{row[8]}')
            elif row[8] == (None,):
                break
        list_one = list(set(list_one))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, callback.message, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()
    elif callback.data == 'üè∑Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ':     # –∫–Ω–æ–ø–∫–∞ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ" –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=15, values_only=True):
            if row[9] is not None:
                list_one.append(f'üè∑Ô∏è{row[8]}')
            elif row[8] == (None,):
                break
        list_one = list(set(list_one))
        file_open = open("menu_logo.jpeg", 'rb')
        buttons(bot, callback.message, kategoriya='—Ä–∞–∑–¥–µ–ª', list_one=list_one,
                image=file_open).razdely_buttons()

    elif len(list_one) == 0:
        list_two = []
        kategoriya = None
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=16, values_only=True):
            if row == (None,):
                break
            elif f'üÜï{row[8]}' == callback.data:  # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Ä–∞–≤–µ–Ω —Ä–∞–∑–¥–µ–ª—É –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
                if row[14] is not None:
                    list_one.append(f'üÜï{row[1][0:30]}')
                    list_one = sorted(list(set(list_one)))
                    kategoriya = '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                    back_value = 'üÜï–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
            elif row[8] == callback.data:     # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Ä–∞–≤–µ–Ω —Ä–∞–∑–¥–µ–ª—É
                list_one.append(row[1][0:30])
                list_one = sorted(list(set(list_one)))
                kategoriya = '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                back_value = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
            elif f'üè∑Ô∏è{row[8]}' == callback.data:  # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Ä–∞–≤–µ–Ω —Ä–∞–∑–¥–µ–ª—É –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
                if row[9] is not None:
                    list_one.append(f'üè∑Ô∏è{row[1][0:30]}')
                    list_one = sorted(list(set(list_one)))
                    kategoriya = '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                    back_value = 'üè∑Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
            elif (callback.data in str(f'üÜï{row[1]}')) and ('üÜï' in callback.data) and row[14] is not None:  # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º–∞–π–ª –Ω–µ–≤ –∏ –∫–æ–ª–æ–Ω–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–∞—è
                if len(row[2]) <= 25:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    list_two.append((f'üÜï{str(row[2])}' + '-' + str(row[3]), f'üÜï{row[0]}')) # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞, –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∞—Ç—Ä–∏–±—É—Ç
                    back_value = f'üÜï{row[8]}'  # –º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (–±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π)
                    kategoriya = '—Ç–æ–≤–∞—Ä'
                else:
                    list_two.append((f'üÜï{row[2][:15]}...{str((row[2]) + str(row[3]))[-12:]}', f'üÜï{row[0]}'))
                    back_value = f'üÜï{row[8]}'
                    kategoriya = '—Ç–æ–≤–∞—Ä'
            elif (callback.data in str(f'üè∑Ô∏è{row[1]}')) and ('üè∑Ô∏è' in callback.data) and row[9] is not None:  # –µ—Å–ª–∏ –∫–æ–ª–±–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º–∞–π–ª –Ω–µ–≤ –∏ –∫–æ–ª–æ–Ω–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–∞—è
                if len(row[2]) <= 25:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    list_two.append((f'üè∑Ô∏è{str(row[2])}' + '-' + str(row[3]), f'üè∑Ô∏è{row[0]}')) # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞, –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∞—Ç—Ä–∏–±—É—Ç
                    back_value = f'üè∑Ô∏è{row[8]}'  # –º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (–±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π)
                    kategoriya = '—Ç–æ–≤–∞—Ä'
                else:
                    list_two.append((f'üè∑Ô∏è{row[2][:15]}...{str((row[2]) + str(row[3]))[-12:]}', f'üè∑Ô∏è{row[0]}'))
                    back_value = f'üè∑Ô∏è{row[8]}'
                    kategoriya = '—Ç–æ–≤–∞—Ä'
            elif callback.data in str(row[1]):
                if len(row[2]) <= 25:
                    list_two.append((str(row[2])+'-'+str(row[3]), row[0]))
                    back_value = row[8]
                    kategoriya = '—Ç–æ–≤–∞—Ä'
                else:
                    list_two.append((f'{row[2][:15]}...{str((row[2])+str(row[3]))[-12:]}', row[0]))
                    back_value = row[8]
                    kategoriya = '—Ç–æ–≤–∞—Ä'
            elif str(row[0]) == str(callback.data):
                tovar_name = row[2]
                article = row[0]
                image = row[10]
                size = row[3]
                price = row[4]
                vnalichii = row[7]
                tovar_type = row[15]
                your_price = row[5]
                dostavka = row[11]
                size_web = row[13]
                bot.send_message(callback.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º..')
                poisk_tovar_in_base(bot, callback.message, article, vnalichii=vnalichii, tovar_name=tovar_name,
                                    image=image, size=size, price=price,
                                    your_price=your_price, size_web=size_web, tovar_type=tovar_type,
                                    dostavka=dostavka).poisk_ostatok(back_value=row[1])
            elif f'üÜï{row[0]}' == str(callback.data):
                tovar_name = row[2]
                article = row[0]
                image = row[10]
                size = row[3]
                price = row[4]
                vnalichii = row[7]
                tovar_type = row[15]
                your_price = row[5]
                dostavka = row[11]
                size_web = row[13]
                bot.send_message(callback.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º..')
                poisk_tovar_in_base(bot, callback.message, article, vnalichii=vnalichii, tovar_name=tovar_name,
                                    image=image, size=size, price=price,
                                    your_price=your_price, size_web=size_web, tovar_type=tovar_type,
                                    dostavka=dostavka).poisk_ostatok(back_value=f'üÜï{row[1]}')
            elif f'üè∑Ô∏è{row[0]}' == str(callback.data):
                tovar_name = row[2]
                article = row[0]
                image = row[10]
                size = row[3]
                price = row[4]
                vnalichii = row[7]
                tovar_type = row[15]
                your_price = row[5]
                dostavka = row[11]
                size_web = row[13]
                bot.send_message(callback.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º..')
                poisk_tovar_in_base(bot, callback.message, article, vnalichii=vnalichii, tovar_name=tovar_name,
                                    image=image, size=size, price=price,
                                    your_price=your_price, size_web=size_web, tovar_type=tovar_type,
                                    dostavka=dostavka).poisk_ostatok(back_value=f'üè∑Ô∏è{row[1]}')
        if len(list_one) != 0:
            file_open = open("menu_logo.jpeg", 'rb')
            list_one.append(back_value)
            buttons(bot, callback.message, kategoriya=kategoriya, list_one=list_one,
                    image=file_open).razdely_buttons()
        elif len(list_two) != 0:
            file_open = open("menu_logo.jpeg", 'rb')
            list_two.append(('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', back_value))
            buttons(bot, callback.message, kategoriya=kategoriya, list_one=list_two,
                    image=file_open).marks_buttons()


def amount(message):
    wb = load_workbook('CCM.xlsx')
    ws = wb['–∫—ç—à']
    try:
        int(message.text)
        for i in range(1, ws.max_row + 1):
            if str(ws.cell(i, 1).value) == str(message.chat.id):
                if int(message.text) <= int(ws.cell(i, 7).value) and int(message.text) != 0:
                    ws.cell(i, 6).value = message.text
                    wb.save('CCM.xlsx')
                    tovar_in_basket(bot=bot, message=message)
                    break
                else:
                    bot.send_message(message.chat.id,
                                     f'–£–≤—ã, –Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–±–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ —Ä–∞–≤–Ω–æ 0. '
                                     f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n'
                                     f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤—ã–±–µ—Ä–∏—Ç–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ üóÇÔ∏è"')
                    buttons(bot, message).zayavka_buttons()
                    break
    except ValueError:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ß–ò–°–õ–û–ú')
        buttons(bot, message).zayavka_buttons()


def sent_message_perehvat_1(message):
    try:
        global rasylka
        rasylka = rasylka_message(message.text)  # —Ö–∑ –ø–æ—á–µ–º—É message.id –∞ –Ω–µ message.text –Ω–æ bot.copy_message() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–∫
        sent = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
        bot.register_next_step_handler(sent, sent_message_perehvat_2)
    except ValueError:
        bot.send_message(admin_id, '–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /sent_message –µ—â–µ —Ä–∞–∑')


def sent_message_perehvat_2(message):
    kb2 = types.ReplyKeyboardRemove()
    global rasylka
    bot.copy_message(rasylka.post, admin_id, message.id, reply_markup=kb2)
    bot.send_message(admin_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


class redact_basket:
    def __init__(self, bot, message, i=None, file=None):
        self.bot = bot
        self.message = message
        self.i = i
        self.file = file
        gc = gspread.service_account(
            filename='pidor-of-the-day-af3dd140b860.json')  # –¥–æ—Å—Ç—É–ø –∫ –≥—É–≥–ª —Ç–∞–±–ª –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Ñ–∞–π–ª—É –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —é—Ä–ª –∞–¥—Ä–µ—Å—É:
        try:
            sh = gc.open('CCM')
            self.worksheet2 = sh.worksheet('–∑–∞—è–≤–∫–∏')
        except Exception:
            self.bot.send_message(self.message.chat.id, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.')

    def redact_quintity(self, message):
        wb = load_workbook('CCM.xlsx')
        ws2 = wb['–ú–õ –û—Å—Ç–∞—Ç–∫–∏ —à—Ç–∞–±']
        try:
            int(message.text)
            if int(message.text) == 0:
                bot.send_message(message.chat.id, f'–ü–æ–¥—á–∏—â–∞–µ–º –±–∞–∑—É..')
                poisk_tovar_in_base(bot, message).basket_delete(self.i)
                bot.send_message(message.chat.id, f'–ó–∞–≥—Ä—É–∂–∞–µ–º..')
                poisk_tovar_in_base(bot, message).basket_search()
            else:
                row = int(self.i)
                article = self.worksheet2.cell(row, 9).value
                for a in range(1, ws2.max_row + 1):
                    if str(ws2.cell(a, 1).value) == str(article):
                        if (int(ws2.cell(a, 8).value) + int(self.worksheet2.cell(row, 7).value)) >= int(message.text):
                            ws2.cell(a, 8).value = int(ws2.cell(a, 8).value) + int(self.worksheet2.cell(row, 7).value) - \
                                                   int(message.text)
                            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!')
                            self.worksheet2.update_cell(row, 7, int(message.text))
                            self.worksheet2.update_cell(row, 11, int(self.worksheet2.cell(row, 7).value) *
                                                        float(str(self.worksheet2.cell(row, 10).value).replace(",", ".").replace(" ", "").replace("\xa0", "")))
                            poisk_tovar_in_base(bot, message).basket_search()
                            wb.save('CCM.xlsx')
                            break
                        else:
                            self.bot.edit_message_text(f'–£–≤—ã, –Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞. '
                                                       f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', self.message.message.chat.id,
                                                       self.message.message.id)
                            buttons(self.bot, self.message.message).basket_buttons_redact()
                            break
        except ValueError:
            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ß–ò–°–õ–û–ú')
            buttons(bot, message).zayavka_buttons()

    def zapros_number(self):
        wb = load_workbook('CCM.xlsx')
        ws = wb['–∫—ç—à']
        for i in range(1, ws.max_row + 1):
            if str(ws.cell(i, 1).value) == str(self.message.chat.id):
                if ws.cell(i, 8).value is not None:
                    zayavka_done(bot=self.bot, message=self.message, number=ws.cell(i, 8).value)
                    break
        else:
            kb4 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            but1 = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É')
            kb4.add(but1)
            mes_num = bot.send_message(self.message.chat.id, '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Å–∏–º '
                                                             '–≤–≤–µ—Å—Ç–∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).',
                                       reply_markup=kb4)
            bot.register_next_step_handler(mes_num, save_number)

    def redact_text(self, message):
        if message.text == '–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è':
            chek_message_category(message)
            buttons(self.bot, message).menu_buttons()
        else:
            with open(self.file, 'w') as help_txt:
                help_txt.write(message.text)
                buttons(self.bot, message).menu_buttons()
                bot.send_message(message.chat.id, '—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')


def save_number(message):
    number = message.text
    if number == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É":
        chek_message_category(message)
    elif len(str(number)) >= 10 and ('+' in (str(number)) or '7' in (str(number)) or '8' in (str(number))):
        zayavka_done(bot=bot, message=message, number=number)
    else:
        bot.send_message(message.chat.id, '—É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.')
        kb4 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        but1 = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ')
        kb4.add(but1)
        mes_num = bot.send_message(message.chat.id, '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Å–∏–º '
                                                    '–≤–≤–µ—Å—Ç–∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).',
                                   reply_markup=kb4)
        bot.register_next_step_handler(mes_num, save_number)


scheduler = BackgroundScheduler()
scheduler.add_job(statistic().obnulenie, "cron", day_of_week='mon-sun', hour=0)
#scheduler.add_job(statistic().obnulenie, "interval", seconds=5)
scheduler.start()

bot.infinity_polling()
